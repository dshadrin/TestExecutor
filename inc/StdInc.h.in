/*
* Copyright (C) 2014-2022 Rhonda Software.
* All rights reserved.
*/

#pragma once

//////////////////////////////////////////////////////////////////////////

#ifdef _MSC_VER
#include <SDKDDKVer.h>
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#endif // _MSC_VER

//////////////////////////////////////////////////////////////////////////
#cmakedefine HAVE_STD_INT
#cmakedefine HAVE_STD_FILESYSTEM
#cmakedefine HAVE_STD_REGEX
#cmakedefine HAVE_STD_THREAD
#cmakedefine HAVE_STD_CHRONO
#cmakedefine HAVE_STD_FORMAT
#cmakedefine HAVE_STD_OPTIONAL

//////////////////////////////////////////////////////////////////////////

#include <string>
#include <memory>
#include <exception>
#include <stdexcept>
#include <sstream>
#include <iostream>
#include <map>
#include <vector>
#include <cstdio>
#include <fstream>

#ifdef HAVE_STD_INT
#include <cstdint>
#else
#include <boost/stdint.hpp>
#endif

#ifdef HAVE_STD_FILESYSTEM
#include <filesystem>
namespace fs = std::filesystem;
#else
#include <boost/filesystem.hpp>
namespace fs = boost::filesystem;
#endif

#ifdef HAVE_STD_REGEX
#include <regex>
namespace rgx = std;
#else
#include <boost/regex.hpp>
namespace rgx = boost;
#endif

#ifdef HAVE_STD_THREAD
#include <thread>
#include <mutex>
#include <condition_variable>
namespace tth = std;
//namespace trds = std;
#else
#include <boost/thread.hpp>
namespace tth = boost;
//namespace trds = boost::thread;
#endif

#ifdef HAVE_STD_CHRONO
#include <chrono>
namespace tch = std;
#else
#include <boost/chrono.hpp>
namespace tch = boost;
#endif

#ifdef HAVE_STD_FORMAT
#include <format>
namespace fmt = std;
#define FMT_STRING(str) (str)
#else
#include <fmt/format.h>
#endif

#ifdef HAVE_STD_OPTIONAL
#include <optional>
namespace top = std;
#else
#include <boost/optional.hpp>
namespace top = boost;
#endif

#include <boost/algorithm/string.hpp>
namespace ba = boost::algorithm;

#define BOOST_BIND_GLOBAL_PLACEHOLDERS
#include <boost/asio.hpp>

//////////////////////////////////////////////////////////////////////////
